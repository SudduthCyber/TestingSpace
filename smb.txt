from impacket.smbconnection import SMBConnection
from impacket.dcerpc.v5 import transport, lsad, lsat, samr, scmr
from impacket.dcerpc.v5.rpcrt import RPC_C_AUTHN_LEVEL_PKT_PRIVACY
from impacket.dcerpc.v5.dtypes import *
import argparse
import sys

class SMBACLManager:
    def __init__(self, server, share, username, password, domain='', port=445):
        self.server = server
        self.share = share
        self.username = username
        self.password = password
        self.domain = domain
        self.port = port
        self.smb_conn = None
        self.dce = None

    def connect_smb(self):
        """Establish an SMB connection."""
        try:
            self.smb_conn = SMBConnection(self.server, self.server, sess_port=self.port)
            self.smb_conn.login(self.username, self.password, self.domain)
            print(f"[+] Connected to SMB {self.server} on share {self.share}")
        except Exception as e:
            print(f"[-] Failed to connect: {e}")
            sys.exit(1)

    def connect_lsarpc(self):
        """Connect to LSARPC to query/set security descriptors."""
        try:
            self.connect_smb()
            rpctransport = transport.SMBTransport(self.server, self.port, r"lsarpc", smb_connection=self.smb_conn)
            self.dce = rpctransport.get_dce_rpc()
            self.dce.set_auth_level(RPC_C_AUTHN_LEVEL_PKT_PRIVACY)
            self.dce.connect()
            self.dce.bind(lsad.MSRPC_UUID_LSAD)
            print("[+] Bound to LSARPC (Local Security Authority)")
        except Exception as e:
            print(f"[-] Failed to connect to LSARPC: {e}")
            sys.exit(1)

    def get_acl(self, filename):
        """Retrieve ACLs of a file using LSARPC."""
        try:
            self.connect_lsarpc()

            # Open LSA Policy
            policy_handle = lsad.hLsarOpenPolicy2(self.dce, MAXIMUM_ALLOWED_ACCESS)['PolicyHandle']

            # Query Security Descriptor
            response = lsad.hLsarQuerySecurityObject(
                self.dce, policy_handle, OWNER_SECURITY_INFORMATION | DACL_SECURITY_INFORMATION
            )
            security_descriptor = response['SecurityDescriptor']

            print(f"[+] ACL for {filename}: {security_descriptor}")
        except Exception as e:
            print(f"[-] Error retrieving ACL: {e}")
        finally:
            self.smb_conn.logoff()
            self.dce.disconnect()

    def set_acl(self, filename, new_acl):
        """Set ACLs on a file using LSARPC."""
        try:
            self.connect_lsarpc()

            # Open LSA Policy
            policy_handle = lsad.hLsarOpenPolicy2(self.dce, MAXIMUM_ALLOWED_ACCESS)['PolicyHandle']

            # Convert new ACL from SDDL format
            security_descriptor = SR_SECURITY_DESCRIPTOR()
            security_descriptor.fromString(new_acl)

            # Set the new ACL
            lsad.hLsarSetSecurityObject(
                self.dce, policy_handle, DACL_SECURITY_INFORMATION, security_descriptor
            )
            print(f"[+] Successfully set ACL on {filename}")
        except Exception as e:
            print(f"[-] Error setting ACL: {e}")
        finally:
            self.smb_conn.logoff()
            self.dce.disconnect()

def main():
    parser = argparse.ArgumentParser(description="SMB ACL Management using Impacket")
    parser.add_argument("server", help="SMB Server IP or Hostname")
    parser.add_argument("share", help="SMB Share Name")
    parser.add_argument("filename", help="File or Directory to query/set ACLs")
    parser.add_argument("username", help="Username for authentication")
    parser.add_argument("password", help="Password for authentication")
    parser.add_argument("--get", action="store_true", help="Retrieve ACLs")
    parser.add_argument("--set", metavar="NEW_ACL", help="Set new ACL (SDDL format)")

    args = parser.parse_args()

    manager = SMBACLManager(args.server, args.share, args.username, args.password)

    if args.get:
        manager.get_acl(args.filename)
    elif args.set:
        manager.set_acl(args.filename, args.set)
    else:
        print("Specify --get to retrieve ACLs or --set <SDDL> to set ACLs.")

if __name__ == "__main__":
    main()
